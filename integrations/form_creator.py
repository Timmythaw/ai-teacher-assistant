import sys
import os
import json
import re
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from googleapiclient.errors import HttpError
from core.google_client import get_google_service
from core.logger import logger


def create_google_form(assessment_json, title="Auto Assessment"):
    """
    Create a Google Form from assessment JSON generated by AssessmentAgent.
    Handles errors gracefully with structured logging.
    """

    try:
        logger.info("Creating Google Form: %s", title)
        service = get_google_service("forms", "v1")

        # Accept JSON string inputs by parsing into a dict
        if isinstance(assessment_json, str):
            try:
                logger.info("Parsing JSON string input...")
                cleaned = assessment_json.strip()
                logger.debug("Original string length: %d", len(assessment_json))

                # Extract JSON from ```json ... ```
                match = re.search(r"```(?:json)?\s*([\s\S]*?)```", cleaned, re.IGNORECASE)
                if match:
                    cleaned = match.group(1).strip()

                # If not starting with {, try to find JSON boundaries
                if not cleaned.startswith("{"):
                    start, end = cleaned.find("{"), cleaned.rfind("}")
                    if start != -1 and end != -1 and end > start:
                        cleaned = cleaned[start:end + 1]

                assessment_json = json.loads(cleaned)
                logger.info("Successfully parsed JSON string to dict")

            except Exception as e:
                logger.error("Failed to parse assessment_json string: %s", str(e))
                return {"error": f"Invalid assessment JSON string: {str(e)}"}

        # Validate the parsed dict
        if not isinstance(assessment_json, dict) or "questions" not in assessment_json:
            logger.warning("Invalid assessment JSON: %s", assessment_json)
            return {"error": "Invalid assessment JSON. Missing 'questions'."}

        # Use provided title if available
        form_title = assessment_json.get("title", title)

        # Extract default point value from rubric (fallback = 1)
        default_points = 1
        for rule in assessment_json.get("rubric", []):
            if rule.get("criteria", "").lower().startswith("correct"):
                default_points = rule.get("points", 1)
                break

        # Create empty form
        NEW_FORM = {
            "info": {"title": form_title, "documentTitle": form_title}
        }
        form = service.forms().create(body=NEW_FORM).execute()
        form_id = form.get("formId")

        if not form_id:
            logger.error("Form creation returned no formId.")
            return {"error": "Failed to create Google Form."}

        service.forms().batchUpdate(
            formId=form_id,
            body={
            "requests": [
                {
                    "updateSettings": {
                        "settings": {"quizSettings": {"isQuiz": True}},
                        "updateMask": "quizSettings.isQuiz"
                    }
                }
            ]
            }
            ).execute()

        # Prepare batchUpdate requests for questions
        batch_requests = []
        for idx, q in enumerate(assessment_json.get("questions", [])):
            try:
                # Ensure question is dict
                if isinstance(q, str):
                    q = {"q": q, "options": [], "answer": None}

                question = {"required": True}

                # Add grading only if answer exists
                if q.get("answer"):
                    question["grading"] = {"pointValue": default_points}

                # Add multiple-choice options only if present
                if q.get("options"):
                    question["choiceQuestion"] = {
                        "type": "RADIO",
                        "options": [{"value": opt} for opt in q["options"]],
                        "shuffle": True
                    }

                item = {
                    "createItem": {
                        "item": {
                            "title": q.get("q", f"Question {idx+1}"),
                            "questionItem": {"question": question}
                        },
                        "location": {"index": idx}
                    }
                }
                batch_requests.append(item)

            except Exception as e:
                logger.warning("Skipping invalid question at index %s: %s", idx, e)

        # Push questions to form
        if batch_requests:
            service.forms().batchUpdate(formId=form_id, body={"requests": batch_requests}).execute()
            logger.info("Added %d questions to Google Form %s", len(batch_requests), form_id)
        else:
            logger.warning("No valid questions found in assessment JSON.")

        edit_url = f"https://docs.google.com/forms/d/{form_id}/edit"
        logger.info("Google Form created successfully: %s", edit_url)

        return {"form_id": form_id, "edit_url": edit_url}

    except HttpError as e:
        logger.error("Google Forms API error: %s", e)
        return {"error": f"Google Forms API error: {e}"}
    except Exception as e:
        logger.error("Form creation failed: %s", e, exc_info=True)
        return {"error": f"Form creation failed: {e}"}


from agents.assessment_agent import AssessmentAgent
asmt_agent = AssessmentAgent()
assessment = asmt_agent.generate_assessment(
    "/home/timmy/ai-teacher-assistant/static/Lecture_Slide.pdf",
    {"type": "MCQ", "difficulty": "Medium", "count": 5, "rubric": True}
)
#print(assessment)

"""
result = create_google_form(assessment, title = "SDLC Quizz")
print("\n---Results---")
print(result)
"""
