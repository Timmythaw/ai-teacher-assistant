import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from googleapiclient.errors import HttpError
from core.google_client import get_google_service
from core.logger import logger

def create_google_form(assessment_json: dict, title="Auto Assessment"):
    """
    Create a Google Form from assessment JSON generated by AssessmentAgent.
    Handles errors gracefully with structured logging.
    """
    try:
        logger.info("Creating Google Form: %s", title)
        service = get_google_service("forms", "v1")

        if not assessment_json or "questions" not in assessment_json:
            logger.warning("Invalid assessment JSON: %s", assessment_json)
            return {"error": "Invalid assessment JSON. Missing 'questions'."}

        # Form metadata
        NEW_FORM = {
            "info": {"title": title, "documentTitle": title}
        }

        # Create empty form
        form = service.forms().create(body=NEW_FORM).execute()
        form_id = form.get("formId")

        if not form_id:
            logger.error("Form creation returned no formId.")
            return {"error": "Failed to create Google Form."}

        # Prepare batchUpdate requests for questions
        requests = []
        for idx, q in enumerate(assessment_json.get("questions", [])):
            try:
                item = {
                    "createItem": {
                        "item": {
                            "title": q.get("q", f"Question {idx+1}"),
                            "questionItem": {
                                "question": {
                                    "required": True,
                                    "grading": {"pointValue": 1} if "answer" in q else None,
                                    "choiceQuestion": {
                                        "type": "RADIO",
                                        "options": [{"value": opt} for opt in q.get("options", [])],
                                        "shuffle": True
                                    } if q.get("options") else None
                                }
                            }
                        },
                        "location": {"index": idx}
                    }
                }
                requests.append(item)
            except Exception as e:
                logger.warning("Skipping invalid question at index %s: %s", idx, e)

        # Push questions to form
        if requests:
            service.forms().batchUpdate(formId=form_id, body={"requests": requests}).execute()
            logger.info("Added %d questions to Google Form %s", len(requests), form_id)
        else:
            logger.warning("No valid questions found in assessment JSON.")

        edit_url = f"https://docs.google.com/forms/d/{form_id}/edit"
        logger.info("Google Form created successfully: %s", edit_url)

        return {"form_id": form_id, "edit_url": edit_url}

    except HttpError as e:
        logger.error("Google Forms API error: %s", e)
        return {"error": f"Google Forms API error: {e}"}
    except Exception as e:
        logger.error("Form creation failed: %s", e, exc_info=True)
        return {"error": f"Form creation failed: {e}"}